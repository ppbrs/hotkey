# For creating the package, I followed these tutorials:
# 	https://packaging.python.org/en/latest/tutorials/packaging-projects/
# 	https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

[project]
name = "hotkey"
description = "Collection of drills to learn hotkeys that I want to use."
readme = "README.md"
dynamic = [
	"version",
]
authors = [
	{name="ppbrs", email="prishchepenko.boris@gmail.com"},
]
requires-python = ">=3.10"
dependencies = [
	"keyboard",
	"types-keyboard",
]

# For a complete list of classifiers, see https://pypi.org/classifiers/.
classifiers = [
	"Programming Language :: Python :: 3",
	"License :: OSI Approved :: MIT License",
	"Operating System :: OS Independent",
]

# After installing the project, a `hotkey` command will be available.
# Executing it will do the equivalent of `from hotkey import start_drill; start_drill()`.
[project.scripts]
hotkey = "hotkey.main:run"

# [build-system] declares which build backend to use - a library that takes a source tree
# and builds a source distribution (*.tar.gz) or wheel (*.whl) from it.
# Examples:
# 	hatchling (https://packaging.python.org/en/latest/key_projects/#setuptools)
# 		https://pypi.org/project/hatchling/
# 	setuptools (https://packaging.python.org/en/latest/key_projects/#setuptools)
# 		https://pypi.org/project/setuptools/
# Also [build-system] allows declaring which dependencies are needed to build the project,
# see `requires`.
[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "hotkey/__about__.py"

[project.urls]
"Homepage" = "https://github.com/ppbrs/hotkey"
"Bug Tracker" = "https://github.com/ppbrs/hotkey/issues"

[tool.isort]
# See all isort options: https://pycqa.github.io/isort/docs/configuration/options.html
line_length = 100
wrap_length = 100

# Personally, I find this option the best. It allows faster debugging and leaving comments
# for a particular import.
force_single_line = "True"

# ==================================================================================================
# Ruff
# ==================================================================================================
# https://docs.astral.sh/ruff/formatter/

[tool.ruff]
line-length = 100

[tool.ruff.format]

# Use double quotes for strings.
quote-style = "double"
# Indent with spaces, rather than tabs.
indent-style = "space"

[tool.ruff.lint]

select = ["ALL"]
ignore = [
	"ANN101",  # Checks that instance method self arguments have type annotations.
	"D200",  # Checks for single-line docstrings that are broken across multiple lines.
	# One-line docstrings:
	# 	D200 One-line docstring should fit on one line with quotes.
	# 	This makes code compact, but I chose not to enforce that to be able to use both styles.
	"D203",  # Checks for docstrings on class definitions that are not preceded by a blank line.
	# Class docstrings:
	# 	D203 1 blank line required before class docstring.
	# 	This looks useless to me.
	"D212",  # Checks for docstring summary lines that are not positioned on the second physical line of the docstring.
	# Multi-line docstrings:
	# 	D212 Multi-line docstring summary should start at the first line.
	# 	D213 Multi-line docstring summary should start at the second line.
	# 	D212 and D213 are obviously in conflict with each other, so D212 is dropped.
	"S311",  # Checks for uses of cryptographically weak pseudo-random number generators.
	"T201",  # Checks for print statements.
	"TRY003",  # Checks for long exception messages that are not defined in the exception class itself.
]

